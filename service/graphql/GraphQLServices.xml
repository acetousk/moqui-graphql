<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">
    <service verb="return" noun="Id" type="interface">
        <out-parameters>
            <parameter name="id"/>
            <parameter name="_graphql_result_null" type="Boolean" default-value="false"><description>
                Moqui service has parameters in context that are set to out parameters automatically, so the result map is not null. It is verbose
                to clear them manually. This special parameter is to tell moqui-graphql ignore the result.
            </description></parameter>
        </out-parameters>
    </service>

    <service verb="return" noun="MessagePayload" type="interface">
        <out-parameters>
            <parameter name="message"/>
            <parameter name="error" type="Boolean"/>
        </out-parameters>
    </service>

    <service verb="return" noun="Connection" type="interface">
        <out-parameters>
            <parameter name="edges" type="List">
                <parameter name="cursor" type="String"/>
                <parameter name="node" type="Map"/>
            </parameter>
            <parameter name="pageInfo" type="Map">
                <!--<parameter name="pageIndex" type="Integer"/>-->
                <!--<parameter name="pageSize" type="Integer"/>-->
                <!--<parameter name="totalCount" type="Integer"/>-->
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="RelayId">
        <in-parameters><parameter name="ev" type="EntityValue" required="true"/></in-parameters>
        <out-parameters><parameter name="id" required="true"/></out-parameters>
        <actions>
            <script><![CDATA[
                import com.moqui.impl.util.GraphQLSchemaUtil
                import org.moqui.impl.entity.EntityDefinition
                import org.moqui.impl.entity.EntityValueImpl

                EntityDefinition ed = (ev as EntityValueImpl).getEntityDefinition()

                id = GraphQLSchemaUtil.encodeRelayId(ev, ed.getPkFieldNames())
            ]]></script>
        </actions>
    </service>

    <service verb="put" noun="ContextWithId">
        <in-parameters><parameter name="ev" type="EntityValue" required="true"/></in-parameters>
        <actions>
            <service-call name="graphql.GraphQLServices.get#RelayId" in-map="[ev: ev]" out-map="result"/>
            <script>result.putAll(ev)</script>
        </actions>
    </service>

    <service verb="build" noun="Connection">
        <implements service="graphql.GraphQLServices.return#Connection"/>
        <in-parameters>
            <parameter name="el" type="EntityList"/>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="totalCount" type="Integer" default-value="0"/>
        </in-parameters>
        <actions>
            <script>
                import com.moqui.impl.util.GraphQLSchemaUtil
            </script>
            <set field="edges" from="[]"/>
            <iterate list="el" entry="ev">
                <script><![CDATA[
                    def edge = [:]
                    def node = [:]

                    Map<String, Object> primaryKeys = ev.getPrimaryKeys()
                    String id
                    if (primaryKeys.size() > 0 && !primaryKeys.values().contains(null)) {
                        id = GraphQLSchemaUtil.encodeRelayId(ev, primaryKeys.keySet().asList())
                    } else {
                        id = ev_index
                    }
                    node.put("id", id)
                    node.putAll(ev)

                    edge.put("node", node)
                    edges.add(edge)
                ]]></script>
            </iterate>
            <set field="pageInfo" from="[pageIndex: pageIndex, pageSize: pageSize, totalCount: totalCount]"/>
        </actions>
    </service>

    <service verb="build" noun="ConnectionByList">
        <implements service="graphql.GraphQLServices.return#Connection"/>
        <in-parameters>
            <parameter name="el" type="List"/>
            <parameter name="pkFieldNames" type="List"><parameter name="fieldName"/></parameter>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="totalCount" type="Integer" default-value="0"/>
        </in-parameters>
        <actions>
            <script>
                import com.moqui.impl.util.GraphQLSchemaUtil
            </script>
            <set field="edges" from="[]"/>
            <iterate list="el" entry="ev">
                <script><![CDATA[
                    def edge = [:]
                    def node = [:]

                    String id
                    if (pkFieldNames.size() > 0 && !pkFieldNames.contains(null)) {
                        id = GraphQLSchemaUtil.encodeRelayId(ev, pkFieldNames)
                    } else {
                        id = ev_index
                    }
                    node.put("id", id)
                    node.putAll(ev)

                    edge.put("node", node)
                    edges.add(edge)
                ]]></script>
            </iterate>
            <set field="pageInfo" from="[pageIndex: pageIndex, pageSize: pageSize, totalCount: totalCount]"/>
        </actions>
    </service>
</services>