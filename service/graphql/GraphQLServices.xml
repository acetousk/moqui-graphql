<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">
    <service verb="return" noun="Id" type="interface">
        <out-parameters>
            <parameter name="id"/>
            <parameter name="_graphql_result_null" type="Boolean" default-value="false"><description>
                Moqui service has parameters in context that are set to out parameters automatically, so the result map is not null. It is verbose
                to clear them manually. This special parameter is to tell moqui-graphql ignore the result.
            </description></parameter>
        </out-parameters>
    </service>

    <service verb="return" noun="MessagePayload" type="interface">
        <out-parameters>
            <parameter name="message"/>
            <parameter name="error" type="Boolean"/>
        </out-parameters>
    </service>

    <service verb="return" noun="Connection" type="interface">
        <out-parameters>
            <parameter name="edges" type="List">
                <parameter name="cursor" type="String"/>
                <parameter name="node" type="Map"/>
            </parameter>
            <parameter name="pageInfo" type="Map">
                <!--<parameter name="pageIndex" type="Integer"/>-->
                <!--<parameter name="pageSize" type="Integer"/>-->
                <!--<parameter name="totalCount" type="Integer"/>-->
            </parameter>
        </out-parameters>
    </service>

    <service verb="get" noun="RelayId" authenticate="anonymous-view">
        <in-parameters><parameter name="ev" type="EntityValue" required="true"/></in-parameters>
        <out-parameters><parameter name="id" required="true"/></out-parameters>
        <actions>
            <script><![CDATA[
                import com.moqui.impl.util.GraphQLSchemaUtil
                import org.moqui.impl.entity.EntityDefinition
                import org.moqui.impl.entity.EntityValueImpl

                EntityDefinition ed = (ev as EntityValueImpl).getEntityDefinition()

                id = GraphQLSchemaUtil.encodeRelayId(ev, ed.getPkFieldNames())
            ]]></script>
        </actions>
    </service>

    <service verb="put" noun="ContextWithId" authenticate="anonymous-view">
        <in-parameters><parameter name="ev" type="EntityValue" required="true"/></in-parameters>
        <actions>
            <service-call name="graphql.GraphQLServices.get#RelayId" in-map="[ev: ev]" out-map="result"/>
            <script>result.putAll(ev)</script>
        </actions>
    </service>

    <service verb="augment" noun="InterfaceWithDerived">
        <in-parameters>
            <parameter name="interfaceList" type="List"/>
            <parameter name="primaryField" required="true"/>
            <parameter name="resolveField" required="true"/>
            <parameter name="objectDefList" type="List"><parameter name="objectDef" type="Map">
                <parameter name="entityName" required="true"/>
                <parameter name="resolveValue" required="true"/>
            </parameter></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="interfaceList" type="List"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityValue
                import org.moqui.impl.entity.EntityConditionFactoryImpl

                if (!interfaceList) return

                ExecutionContext ec = context.ec
                EntityConditionFactoryImpl cf = (EntityConditionFactoryImpl) ec.entity.conditionFactory

                for (Map objectDef in objectDefList) {
                    String entityName = objectDef.entityName
                    String resolveValue = objectDef.resolveValue

                    List derivedList = interfaceList.findAll({ it -> it.get(resolveField) == resolveValue })
                    List derivedIds = derivedList.collect({ it -> it.get(primaryField) })
                    EntityFind ef = ec.entity.find((String) entityName)
                            .condition(cf.makeActionConditionDirect((String) primaryField, "in", derivedIds, null, null, false, false, false, "false"))

                    ef.list().each { EntityValue ev ->
                        Map interfaceMap = interfaceList.find({ it -> it.get(primaryField) == ev.get(primaryField) }) as Map
                        interfaceMap.putAll(ev.getMap())
                    }
                }
            ]]></script>
        </actions>
    </service>

    <service verb="build" noun="Connection" authenticate="anonymous-view">
        <implements service="graphql.GraphQLServices.return#Connection"/>
        <in-parameters>
            <parameter name="el" type="EntityList"/>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="totalCount" type="Integer" default-value="0"/>
        </in-parameters>
        <actions>
            <script>
                import com.moqui.impl.util.GraphQLSchemaUtil
            </script>
            <set field="edges" from="[]"/>
            <iterate list="el" entry="ev">
                <script><![CDATA[
                    def edge = [:]
                    def node = [:]

                    Map<String, Object> primaryKeys = ev.getPrimaryKeys()
                    String id
                    if (primaryKeys.size() > 0 && !primaryKeys.values().contains(null)) {
                        id = GraphQLSchemaUtil.encodeRelayId(ev, primaryKeys.keySet().asList())
                    } else {
                        id = ev_index
                    }
                    node.put("id", id)
                    node.putAll(ev)

                    edge.put("node", node)
                    edges.add(edge)
                ]]></script>
            </iterate>

            <script><![CDATA[
                int pageMaxIndex = ((totalCount - 1) as BigDecimal).divide(pageSize as BigDecimal, 0, BigDecimal.ROUND_DOWN).intValue()
                int pageRangeLow = pageIndex * pageSize + 1
                int pageRangeHigh = (pageIndex * pageSize) + pageSize
                if (pageRangeHigh > totalCount) pageRangeHigh = totalCount
                boolean hasPreviousPage = pageIndex > 0
                boolean hasNextPage = pageMaxIndex > pageIndex

                pageInfo = ['pageIndex'      : pageIndex, 'pageSize': pageSize, 'totalCount': totalCount,
                            'pageMaxIndex'   : pageMaxIndex, 'pageRangeLow': pageRangeLow, 'pageRangeHigh': pageRangeHigh,
                            'hasPreviousPage': hasPreviousPage, 'hasNextPage': hasNextPage]
            ]]></script>
        </actions>
    </service>

    <service verb="build" noun="ConnectionByList" authenticate="anonymous-view">
        <implements service="graphql.GraphQLServices.return#Connection"/>
        <in-parameters>
            <parameter name="el" type="List"/>
            <parameter name="pkFieldNames" type="List" default="[]"><parameter name="fieldName"/></parameter>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="totalCount" type="Integer" default-value="0"/>
            <parameter name="type" default-value="offset"/>
            <parameter name="startCursor"/>
            <parameter name="endCursor"/>
            <parameter name="hasNextPage" type="Boolean"/>
            <parameter name="hasPreviousPage" type="Boolean"/>
        </in-parameters>
        <actions>
            <script>
                import com.moqui.impl.util.GraphQLSchemaUtil

                static private Object buildFieldRecursive(Object obj) {
                    if (obj instanceof List) {
                        List edges = []

                        for (Object item in (List) obj) {
                            Map edge = [:]
                            Map node = buildFieldRecursive(item)
                            edge.put("node", node)
                            edges.add(edge)
                        }
                        return [edges: edges]
                    } else if (obj instanceof Map) {
                        Map map = [:]
                        for (Map.Entry entry in (Map) obj) {
                            map.put((String) entry.key, buildFieldRecursive(entry.value))
                        }
                        return map
                    } else {
                        return obj
                    }
                }
            </script>
            <set field="edges" from="[]"/>
            <iterate list="el" entry="ev">
                <script><![CDATA[
                    def edge = [:]
                    def node = [:]

                    String id
                    if (pkFieldNames.size() > 0 && !pkFieldNames.contains(null)) {
                        id = GraphQLSchemaUtil.encodeRelayId(ev, pkFieldNames)
                        node.put("id", id)
                    }

                    Map map = buildFieldRecursive(ev)
                    node.putAll(map)

                    edge.put("node", node)
                    edges.add(edge)
                ]]></script>
            </iterate>
            <service-call name="graphql.GraphqlServices.build#PageInfo" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="build" noun="PageInfo" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="pageIndex" type="Integer" default-value="0"/>
            <parameter name="pageSize" type="Integer" default-value="20"/>
            <parameter name="totalCount" type="Integer" default-value="0"/>
            <parameter name="type" default-value="offset"/>
            <parameter name="startCursor"/>
            <parameter name="endCursor"/>
            <parameter name="hasNextPage" type="Boolean"/>
            <parameter name="hasPreviousPage" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageInfo" type="Map"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                switch (type) {
                    case "offset":
                        int pageMaxIndex = ((totalCount - 1) as BigDecimal).divide(pageSize as BigDecimal, 0, BigDecimal.ROUND_DOWN).intValue()
                        int pageRangeLow = pageIndex * pageSize + 1
                        int pageRangeHigh = (pageIndex * pageSize) + pageSize
                        if (pageRangeHigh > totalCount) pageRangeHigh = totalCount
                        boolean hasPreviousPage = pageIndex > 0
                        boolean hasNextPage = pageMaxIndex > pageIndex

                        pageInfo = ['pageIndex'      : pageIndex, 'pageSize': pageSize, 'totalCount': totalCount,
                                    'pageMaxIndex'   : pageMaxIndex, 'pageRangeLow': pageRangeLow, 'pageRangeHigh': pageRangeHigh,
                                    'hasPreviousPage': hasPreviousPage, 'hasNextPage': hasNextPage]
                        break
                    case "cursor-after":
                        pageInfo = [hasNextPage:hasNextPage, endCursor:endCursor]
                        break
                }
            ]]></script>
        </actions>
    </service>
</services>