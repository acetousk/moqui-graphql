<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="search" noun="DataDocumentsByJson">
        <description>
            This service is similiar to org.moqui.search.SearchServices.search#DataDocuments, but with query json instead
        </description>
        <in-parameters>
            <parameter name="indexName" required="true"/>
            <parameter name="documentType"><description>The ElasticSearch document type. For DataDocument based docs
                this is the dataDocumentId.</description></parameter>
            <parameter name="queryJson" required="true"/>
            <parameter name="orderByFields" type="List"><parameter name="orderByField"/></parameter>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
            <parameter name="flattenDocument" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="documentList" type="List">
                <description>List of documents, each document is a Map with nested Maps and Lists of Maps.</description>
                <parameter name="document" type="Map"/>
            </parameter>
            <parameter name="documentListCount" type="Integer"><description>The total count of hits, not just the
                limited number returned.</description></parameter>
            <parameter name="documentListPageIndex" type="Integer"/>
            <parameter name="documentListPageSize" type="Integer"/>
            <parameter name="documentListPageMaxIndex" type="Integer"/>
            <parameter name="documentListPageRangeLow" type="Integer"/>
            <parameter name="documentListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions><script><![CDATA[
            /* useful docs for query API: http://www.elasticsearch.org/guide/reference/api/search/uri-request/ */


            import org.elasticsearch.client.Client
            import org.elasticsearch.action.get.MultiGetItemResponse
            import org.elasticsearch.action.get.MultiGetRequestBuilder
            import org.elasticsearch.action.search.SearchRequestBuilder
            import org.elasticsearch.index.query.QueryBuilder
            import org.elasticsearch.index.query.QueryBuilders
            import org.elasticsearch.search.SearchHit
            import org.elasticsearch.search.SearchHits
            import org.elasticsearch.search.sort.SortOrder
            import org.moqui.context.ExecutionContext
            import org.moqui.elasticsearch.ElasticSearchUtil

            ExecutionContext ec = context.ec
            Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)

            fromOffset = pageIndex * pageSize
            sizeLimit = pageSize

            documentList = []

            // make sure index exists
            if (!ElasticSearchUtil.checkIndexExists(indexName, ec)) {
                ec.loggerFacade.warn("Tried to search with indexName ${indexName} that does not exist, returning empty list")
                documentListCount = 0
                documentListPageIndex = pageIndex
                documentListPageSize = pageSize
                documentListPageMaxIndex = 0
                documentListPageRangeLow = 0
                documentListPageRangeHigh = 0
                return
            }

            QueryBuilder queryBuilder = QueryBuilders.wrapperQuery((String) queryJson)

            // get the search hits
            SearchRequestBuilder srb = elasticSearchClient.prepareSearch().setIndices(indexName)
                    .setQuery(queryBuilder).setFrom(fromOffset).setSize(sizeLimit)
                    .setFetchSource(true)
            if (documentType) srb.setTypes(((String) documentType).split(","))
            for (String orderByField in orderByFields) {
                boolean ascending = true
                if (orderByField.charAt(0) == '-') {
                    ascending = false
                    orderByField = orderByField.substring(1)
                } else if (orderByField.charAt(0) == '+') {
                    ascending = true
                    orderByField = orderByField.substring(1)
                }
                // ec.logger.warn("========= adding ${orderByField}, ${ascending}")
                srb.addSort(orderByField, ascending ? SortOrder.ASC : SortOrder.DESC)
            }

            SearchHits hits = srb.execute().actionGet().getHits()
            for (SearchHit hit in hits) {
                Map document = hit.getSource()
                // As of ES 2.0 _index, _type, _id aren't included in the document
                document._index = hit.getIndex()
                document._type = hit.getType()
                document._id = hit.getId()
                // how to get timestamp? doesn't seem to be in API: document._timestamp = hit.get?
                document._version = hit.getVersion()
                documentList.add(flattenDocument ? flattenNestedMap(document) : document)
            }

            // get the total search count
            SearchRequestBuilder countSrb = elasticSearchClient.prepareSearch().setIndices(indexName)
                    .setQuery(queryBuilder).setSize(0)
            if (documentType) countSrb.setTypes(((String) documentType).split(","))
            documentListCount = countSrb.execute().actionGet().getHits().getTotalHits()

            // calculate the pagination values
            documentListPageIndex = pageIndex
            documentListPageSize = pageSize
            documentListPageMaxIndex = ((BigDecimal) documentListCount - 1).divide(documentListPageSize, 0, BigDecimal.ROUND_DOWN) as int
            documentListPageRangeLow = documentListPageIndex * documentListPageSize + 1
            documentListPageRangeHigh = (documentListPageIndex * documentListPageSize) + documentListPageSize
            if (documentListPageRangeHigh > documentListCount) documentListPageRangeHigh = documentListCount
            ]]></script></actions>
    </service>
   
</services>