<?xml version="1.0" encoding="UTF-8"?><!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->

<!-- NOTE: files using this schema are found in the service directory in a component when named *.rest.xml -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:include schemaLocation="http://moqui.org/xsd/common-types-2.0.xsd"/>

    <xs:simpleType name="name-all-upper"><xs:restriction base="xs:string">
        <xs:pattern value="[A-Z][_A-Z0-9]*"/></xs:restriction></xs:simpleType>

    <xs:simpleType name="graphql-scalar-type">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Int"/>
            <xs:enumeration value="Long"/>
            <xs:enumeration value="Float"/>
            <xs:enumeration value="String"/>
            <xs:enumeration value="Boolean"/>
            <xs:enumeration value="ID"/>
            <xs:enumeration value="BigInteger"/>
            <xs:enumeration value="BigDecimal"/>
            <xs:enumeration value="Byte"/>
            <xs:enumeration value="Short"/>
            <xs:enumeration value="Char"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:element name="graphql-type" abstract="true"/>

    <xs:element name="scalar-type" substitutionGroup="graphql-type">
        <xs:complexType>
            <xs:attribute name="name" type="graphql-scalar-type"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="enum-value">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="0" maxOccurs="1" name="depreciation-reason" type="xs:string"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-all-upper" use="required"/>
            <xs:attribute name="value"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="enum" substitutionGroup="graphql-type">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="1" maxOccurs="unbounded" ref="enum-value"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-upper" use="required"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="union" substitutionGroup="graphql-type">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="1" maxOccurs="unbounded" name="type" type="xs:string"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-upper" use="required"/>
            <xs:attribute name="type-resolver" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="interface" substitutionGroup="graphql-type">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="field"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-upper" use="required"/>
            <xs:attribute name="type-resolver" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="object" substitutionGroup="graphql-type">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" name="interface">
                    <xs:complexType>
                        <xs:attribute name="name" type="xs:string" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="field"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-upper" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="service">
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="list-name" type="xs:string">
                <xs:annotation><xs:documentation>If the field is a list, set this attribute to get variable
                    in service call result map.</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="empty-fetcher"/>
    <xs:element name="entity-fetcher">
        <xs:complexType>
            <xs:attribute name="entity-name" type="name-full" use="required"/>
            <xs:attribute name="operation">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="one"/>
                        <xs:enumeration value="list"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="pre-fetcher">
        <xs:complexType>
            <xs:attribute name="service" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="post-fetcher">
        <xs:complexType>
            <xs:attribute name="service" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="service-fetcher">
        <xs:complexType>
            <xs:attribute name="service" type="name-full" use="required"/>
            <xs:attribute name="require-authentication" type="authc-options" default="true"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="field">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
                <xs:element minOccurs="0" maxOccurs="1" name="depreciation-reason" type="xs:string"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="auto-arguments"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="argument"/>
                <xs:choice minOccurs="0" maxOccurs="1">
                    <xs:element ref="empty-fetcher"/>
                    <xs:element ref="entity-fetcher"/>
                    <xs:element ref="service-fetcher"/>
                </xs:choice>
                <xs:element minOccurs="0" maxOccurs="1" ref="pre-fetcher"/>
                <xs:element minOccurs="0" maxOccurs="1" ref="post-fetcher"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="field"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-parameter" use="required"/>
            <xs:attribute name="type" use="required">
                <xs:simpleType>
                    <xs:union memberTypes="graphql-scalar-type name-upper"/>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="non-null" type="xs:boolean" default="false"/>
            <xs:attribute name="is-list" type="xs:boolean" default="false"/>
            <xs:attribute name="list-item-non-null" type="xs:boolean" default="false"/>
            <xs:attribute name="require-authentication" type="authc-options" default="true"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="exclude">
        <xs:complexType>
            <xs:attribute name="field-name" type="name-field" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="auto-arguments">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="exclude"/>
            </xs:sequence>
            <xs:attribute name="entity-name" type="name-full"/>
            <xs:attribute name="include" default="all">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="pk"/>
                        <xs:enumeration value="nonpk"/>
                        <xs:enumeration value="all"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="required" default="false">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                        <!-- Not supported yet. Maybe not, since there is no nest -->
                        <!--
                        <xs:enumeration value="disabled">
                            <xs:annotation>
                                <xs:documentation>Behave the same as if the parameter did not exist, useful when
                                    overriding a previously defined parameter.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration> -->
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <!-- Not supported yet -->
            <!--
            <xs:attribute name="allow-html" default="none">
                <xs:annotation>
                    <xs:documentation>
                        Applies only to String fields. Only checked for incoming parameters (meant for validating input from
                        users, other systems, etc). Defaults to "none" meaning no HTML is allowed (will result in an error
                        message).

                        If some HTML is desired then use "safe" which will follow the rules in the antisamy-esapi.xml file.
                        This should be safe for both internal and public users.

                        In rare cases when users are trusted or it is not a sensitive field the "any" option may be used to not
                        check the HTML content at all.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="any"/>
                        <xs:enumeration value="safe"/>
                        <xs:enumeration value="none"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            -->
        </xs:complexType>
    </xs:element>

    <xs:element name="argument">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="1" name="description" type="xs:string"/>
            </xs:sequence>
            <xs:attribute name="name" type="name-parameter" use="required"/>
            <xs:attribute name="type" type="xs:string" use="required"/>
            <xs:attribute name="required" type="xs:boolean" default="false">
                <xs:annotation><xs:documentation>It seems GraphQL-Java does not support required on GraphQLArgument</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="default-value" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="input-type">
        <xs:complexType>
            <xs:attribute name="name" use="required">
                <xs:simpleType>
                    <xs:union memberTypes="graphql-scalar-type name-upper"/>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="schema">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="graphql-type"/>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="input-type"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="query" type="xs:string">
                <xs:annotation><xs:documentation>Define query type of GraphQL Schema</xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="mutation" type="xs:string">
                <xs:annotation><xs:documentation>Define mutation type of GraphQL Schema</xs:documentation></xs:annotation>
            </xs:attribute>
        </xs:complexType>

    </xs:element>
</xs:schema>